---
description: 
globs: 
alwaysApply: true
---
## Regla de Sincronización entre Carpetas `_ES` y `_EN`

> **Importante**: Esta regla se refiere exclusivamente a la sincronización local del contenido entre las carpetas `_ES` y `_EN`. No tiene ninguna relación con el control de versiones git, que se maneja de forma independiente según otras reglas específicas.

Este proyecto es una documentación bilingüe en la que utilizaremos la carpeta `_ES` como base de la versión en castellano y la carpeta `_EN` como base de la versión en inglés. **Ambas serán copias espejo**, cada una en su respectivo idioma.

**Todo el trabajo se realizará siempre sobre la carpeta `_ES`, que funcionará como base principal del proyecto. A partir de ella se realizarán las correspondientes replicaciones en la carpeta `_EN`.**

### Principio de Unidireccionalidad

1. **Dirección Única de Sincronización**
   - La sincronización SIEMPRE será unidireccional: desde `_ES` hacia `_EN`
   - NUNCA se debe sincronizar contenido desde `_EN` hacia `_ES`
   - La carpeta `_ES` es la fuente única de verdad (source of truth)

2. **Proceso de Sincronización Unidireccional**
   - Todo cambio DEBE originarse en `_ES`
   - Los cambios en `_EN` son SIEMPRE resultado de cambios en `_ES`
   - Si se detectan cambios directos en `_EN`, estos DEBEN ser descartados

3. **Resolución de Conflictos**
   - En caso de conflicto, SIEMPRE prevalece el contenido de `_ES`
   - Cualquier modificación directa en `_EN` será sobrescrita por el contenido de `_ES`
   - No se debe intentar preservar cambios realizados directamente en `_EN`

> ⚠️ **CRÍTICO**: La violación del principio de unidireccionalidad puede causar inconsistencias graves en el contenido. SIEMPRE mantener `_ES` como única fuente de verdad.

### Reglas de Sincronización

- Cualquier acción realizada en la carpeta `_ES` —ya sea **creación**, **modificación**, **actualización** o **eliminación** de contenido— deberá ser **replicada en la carpeta `_EN`**.
- La replicación en la carpeta `_EN` debe incluir una **traducción completa y fiel del contenido textual** de **castellano neutro a inglés**.
- Los **nombres de archivos y carpetas** en ambas (`_ES` y `_EN`) deben ser **idénticos** y estar siempre redactados en **inglés**.
- La **estructura de directorios** debe mantenerse sincronizada entre ambas carpetas.
- Las **rutas internas** dentro de los archivos de la carpeta `_ES` deben **referenciar exclusivamente a archivos dentro de `_ES`**, y las rutas internas de los archivos de la carpeta `_EN` deben **referenciar exclusivamente a archivos dentro de `_EN`**.  
  **Nunca deben enlazarse archivos entre las carpetas `_ES` y `_EN`**, para garantizar la **independencia total entre ambas versiones**.
- ⚠️ **CRÍTICO**: Para mantener un rendimiento óptimo, es ABSOLUTAMENTE NECESARIO analizar ÚNICAMENTE los archivos que han sido modificados, utilizando git status de `_ES` para saber cuales son. NUNCA se debe realizar un análisis completo de todos los archivos del proyecto, ya que esto degradaría significativamente el rendimiento del sistema.

### Reglas Críticas para Eliminación de Contenido

1. **Prioridad en la Eliminación**
   - La eliminación de contenido debe tener la MÁXIMA PRIORIDAD durante la sincronización
   - SIEMPRE verificar línea por línea que el contenido eliminado en `_ES` sea también eliminado en `_EN`
   - NO dejar líneas huérfanas o espacios en blanco innecesarios

2. **Proceso de Verificación de Eliminación**
   - Realizar una comparación directa línea por línea entre archivos
   - Confirmar que cada línea eliminada en `_ES` NO existe en `_EN`
   - Verificar que no queden espacios en blanco o líneas vacías donde estaba el contenido eliminado

3. **Validación Post-Eliminación**
   - Después de cada operación de eliminación:
     - Verificar que el contenido fue completamente eliminado
     - Comprobar que la estructura del documento se mantiene intacta
     - Confirmar que no hay líneas en blanco innecesarias

4. **Manejo de Errores en Eliminación**
   - Si una eliminación falla:
     - Intentar nuevamente la eliminación
     - Verificar el contenido circundante
     - Asegurar que no queden fragmentos del contenido eliminado

> ⚠️ **CRÍTICO**: La eliminación incorrecta de contenido puede causar inconsistencias graves entre las versiones. Este proceso debe ser tratado como una operación crítica y verificada múltiples veces.

### Excepciones en la Sincronización

- Durante el proceso de sincronización y traducción, se **ignorará completamente** el contenido que se encuentre entre los comentarios:
  ```html
  <!-- MULTILANGUAJE MENU START -->
  ejemplo de contenido a ignorar
  <!-- MULTILANGUAJE MENU END -->
  ```
- Este contenido se mantendrá sin cambios en ambas carpetas, ya que contiene elementos específicos del menú multilingüe que no requieren traducción. Y NUNCA BAJO NINGUNA EXCEPCIÓN SE REALIZARAN MODIFICACIONES DE ESTE CONTENIDO YA QUE GENERARÍA PROBLEMAS DE ENLACES DE RUTAS. ES CRITICO MANTENER SIEMPRE ESTA EXECPCION

### Ejecución de la Sincronización

La sincronización se puede realizar de dos formas:

1. **Automática**
   - Se tiene en cuenta cada vez que se realiza cualquier acción en la carpeta `_ES` —ya sea **creación**, **modificación**, **actualización** o **eliminación** de archivos o contenido
   - Se ejecuta automáticamente cada vez que se realiza un cambio o añadido en la carpeta `_ES`
   - Se ejecuta en segundo plano para no interrumpir el trabajo
   - **Análisis de contenido**:
     - Comparar el contenido actualizado en `_ES` con la versión existente en `_EN`
     - Identificar los cambios específicos o nuevos añadidos de contenido que requieren traducción
     - **Identificar y eliminar en `_EN` todo el contenido que haya sido borrado en `_ES`**
     - Asegurar que la traducción mantenga el significado y contexto original
     - Preservar el formato y estructura del documento

2. **Manual (comando `rcsync`)**
   - Se puede ejecutar manualmente en cualquier momento usando el comando `rcsync`
   - Útil cuando se necesita forzar una sincronización completa
   - También se ejecuta en segundo plano para no interrumpir el trabajo
	<!-- - ⚠️ **CRÍTICO**: Para mantener un rendimiento óptimo, es ABSOLUTAMENTE NECESARIO analizar ÚNICAMENTE los archivos que han sido modificados, utilizando git status de `_ES` para saber cuales son. NUNCA se debe realizar un análisis completo de todos los archivos del proyecto, ya que esto degradaría significativamente el rendimiento del sistema. -->

### Proceso Específico para Nuevos Archivos Markdown

Cuando se cree un nuevo archivo `.md` en la carpeta `_ES`, se debe seguir este proceso específico:

1. **Creación y Replicación**
   - Crear el archivo `.md` en la carpeta `_ES`
   - Replicar inmediatamente el archivo en la carpeta `_EN` manteniendo el mismo nombre

2. **Inserción del Menú Multilenguaje**
   - En el archivo de `_ES`:
     - Insertar al inicio del archivo el snippet de menú multilenguaje para ES ubicado en `snippets/multilanguaje-menu-es.md`
     - Reemplazar `<file-path>` con la ruta relativa del archivo desde la raíz de `_ES`
   - En el archivo de `_EN`:
     - Insertar al inicio del archivo el snippet de menú multilenguaje para EN ubicado en `snippets/multilanguaje-menu-en.md`
     - Reemplazar `<file-path>` con la ruta relativa del archivo desde la raíz de `_EN`

3. **Ejemplo de Estructura**
   Para un archivo creado en `_ES/typescript/intro.md`, el proceso resultaría en:

   En `_ES/typescript/intro.md`:
   ```markdown
   <!-- MULTILANGUAJE MENU START -->
   ES | [EN](https:/lckpig.gitbook.io/practical-dev-handbook/typescript/intro)
   <!-- MULTILANGUAJE MENU END -->
   
   [contenido en español...]
   ```

   En `_EN/typescript/intro.md`:
   ```markdown
   <!-- MULTILANGUAJE MENU START -->
   EN | [ES](https:/lckpig.gitbook.io/es-practical-dev-handbook/typescript/intro)
   <!-- MULTILANGUAJE MENU END -->
   
   [contenido en inglés...]
   ```

> **Importante**: Este proceso debe ejecutarse SIEMPRE que se cree un nuevo archivo `.md`, sin excepciones, para mantener la consistencia en la navegación multilingüe del proyecto.

> Esta norma asegura la coherencia bilingüe del proyecto y permite mantener ambas versiones del contenido actualizadas, equivalentes, organizadas y completamente independientes entre sí.
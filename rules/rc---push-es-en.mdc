---
description: 
globs: 
alwaysApply: true
---
## Regla personalizada `rcpush`

### Restricción importante sobre comandos

- **Ejecutar comandos individualmente**: Cada comando de consola debe ejecutarse de forma independiente, individual y secuencial, sin utilizar operadores de concatenación (`&&`).
- **Formato correcto**: 
  ```bash
  cd _ES
  ```
  ```bash
  git status
  ```
- **Formato incorrecto** (NO USAR): 
  ```bash
  cd _ES && git status
  ```
- Esta restricción es crítica ya que el operador `&&` no funciona correctamente en la consola del sistema y generará errores.
- 
Cuando se ejecuta el comando `rcpush`, se debe realizar un proceso completo de git en ambas carpetas siguiendo estos pasos:

### En la carpeta `_ES`:

1. **Comprobar el estado**
   - Ejecutar `git status` para verificar los cambios pendientes
   - Mostrar claramente qué archivos están:
     - Modificados
     - Sin seguimiento (untracked)
     - Eliminados

2. **Añadir todos los cambios**
   - Ejecutar `git add -A` para añadir todos los cambios al área de preparación

3. **Generar y realizar commit**
   <!-- - **Analizar los cambios para generar automáticamente un mensaje de commit relevante y conciso**:
     - Examinar los archivos modificados/añadidos con `git diff --staged` para entender la naturaleza de los cambios
     - Crear un mensaje breve que describa el propósito o la esencia de los cambios
     - El mensaje debe ser descriptivo pero conciso (máximo 50-72 caracteres para la línea principal) -->
   - **Analizar los cambios para generar automáticamente un mensaje de commit relevante y conciso**:
     - Crear un mensaje breve ( en castellano neutro ) que describa el propósito o la esencia de los cambios
     - El mensaje debe ser descriptivo pero conciso (máximo 50-72 caracteres para la línea principal)
   <!-- - Alternativamente, preguntar al usuario por un mensaje si lo prefiere -->
   <!-- - Ejecutar `git commit -m "mensaje"` con el mensaje generado o proporcionado -->
   - Ejecutar `git commit -m "mensaje"` con el mensaje generado

4. **Push a repositorio remoto**
   - Ejecutar `git push` para enviar los cambios al repositorio remoto
   - Mostrar claramente el resultado del push
   - En caso de error, mostrar las opciones para resolverlo

### Si el proceso en `_ES` es exitoso, proceder con la carpeta `_EN`:

1. **Repetir el mismo proceso en la carpeta `_EN`**
   - Comprobar estado con `git status`
   - Añadir cambios con `git add -A`
   - Realizar commit con el mismo mensaje usado en `_ES` pero traducido al Ingles
   - Push con `git push`
 
### Si el proceso en `_EN` es exitoso, proceder con la carpeta `.cursor`:

1. **Repetir el mismo proceso en la carpeta `.cursor`**
   - Comprobar estado con `git status`
   - Añadir cambios con `git add -A`
   - **Analizar los cambios para generar automáticamente un mensaje de commit relevante y conciso**:
     - Crear un mensaje breve que describa el propósito o la esencia de los cambios
     - El mensaje debe ser descriptivo pero conciso (máximo 50-72 caracteres para la línea principal)
   - Ejecutar `git commit -m "mensaje"` con el mensaje generado 
   - Push con `git push`

### Finalizar el proceso:

1. **Volver a la carpeta `_ES`**
2. **Mostrar resumen de operaciones realizadas**
   - Indicar claramente qué operaciones fueron exitosas y cuáles fallaron
   - Mostrar cualquier mensaje relevante para el usuario

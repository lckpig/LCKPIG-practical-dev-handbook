---
description: 
globs: 
alwaysApply: true
---
---
description: Reglas de sincronización entre carpetas _ES y _EN
alwaysApply: true
---
## Regla de Sincronización entre Carpetas `_ES` y `_EN`

> **Importante**: Esta regla se refiere exclusivamente a la sincronización local del contenido entre las carpetas `_ES` y `_EN`. No tiene ninguna relación con el control de versiones git, que se maneja de forma independiente según otras reglas específicas.

### 1. Principio Fundamental

- **Fuente Única de Verdad**: La carpeta `_ES` es la única fuente de verdad para todo el contenido.
- **Unidireccionalidad**: La sincronización SIEMPRE será de `_ES` hacia `_EN`.
- **Prohibición de Cambios Directos**: No se permiten modificaciones directas en `_EN`. Cualquier cambio debe originarse en `_ES`.
> ⚠️ **CRÍTICO**: SIEMPRE se debe Verificar existencia de archivos en ambas carpetas (`_ES` y `_EN`) y Reconstruir en `_EN` cualquier archivo que exista en `_ES` pero no en `_EN` 

### 1.1 Relación con Otras Reglas
- **Respeto a @rc---no-auto-git-commit-push.mdc**:
  - Durante cualquier operación de sincronización (automática o manual vía `rcsync`):
    - NO se realizarán operaciones git (commit/push) automáticamente
    - Cualquier modificación en `_ES` o `_EN` resultante de la sincronización:
      - Quedará como cambio pendiente en el working directory
      - Solo se commiteará/pusheara cuando el desarrollador lo solicite explícitamente
  - El proceso de sincronización y el control de versiones son flujos independientes que deben manejarse por separado

### 2. Reglas de Sincronización

#### 2.1 Estructura y Nomenclatura
- **Estructura de Directorios**: Debe ser idéntica en ambas carpetas y estar SIEMPRE en inglés.
- **Nombres de Archivos**: Deben ser idénticos y estar SIEMPRE en inglés.
- La **estructura de directorios y archivos** debe mantenerse sincronizada SIEMPRE entre ambas carpetas.
- **Rutas Internas**: 
  - En `_ES`: deben referenciar solo archivos dentro de `_ES`
  - En `_EN`: deben referenciar solo archivos dentro de `_EN`
  - Nunca enlazar archivos entre carpetas

### 2.2 Optimización de Rendimiento
- **Detección de cambios mejorada**:
  - Reconstruir primero todos los archivos faltantes en `_EN` comparando recursivamente ambos directorios
  - Para archivos existentes en ambas carpetas:
    - Calcular hash MD5 del contenido en `_ES` y `_EN`
    - Comparar hashes para detectar cambios reales
  - Usar sistema de caché con timestamps de última modificación
  - Ignorar node_modules y carpetas de dependencias

- **Proceso de análisis**:
  1. Listar todos los archivos en `_ES` usando `find . -type f`
  2. Filtrar por extensión (.md, .ts, etc.)
  3. Para cada archivo:
     - Si no existe en `_EN`: reconstrucción inmediata
     - Si existe: comparar hash + última modificación
     - Si difiere: marcar para sincronización

### 2.3 Sistema de Buffer de Acciones
- **Registro de operaciones**:
  - Todo cambio en `_ES` (creación, modificación, eliminación) debe generar una entrada en `.syncbuffer/history.log`
  - Formato de registro:
    ```json
    {
      "id": "uuidv4",
      "timestamp": "ISO8601",
      "action": "create|update|delete",
      "path": "ruta/relativa/archivo.md",
      "checksum": "md5(content)",
      "status": "pending|applied|failed"
    }
    ```
- **Prioridad de ejecución**:
  1. Operaciones de eliminación
  2. Actualizaciones de contenido
  3. Creaciones de nuevos archivos

### 2.4 Protocolo de Eliminación Estricta
- **Detección de elementos huérfanos en _EN**:
  - Cualquier archivo/carpeta presente en _EN que no exista en _ES DEBE considerarse huérfano
  - Los elementos huérfanos DEBEN eliminarse automáticamente de _EN durante la sincronización
  - Excepción: Archivos en `.gitignore` o listados en `.syncbuffer/allowlist.json`
 
### 3. Proceso de Sincronización

#### 3.1 Sincronización Automática
- Se activa con cualquier cambio en `_ES` (creación, modificación, actualización, eliminación)
- Proceso:
  1. Reconstrucción de archivos inexistentes
  2. Identificar archivos modificados
  3. Comparar contenido actualizado
  4. Traducir contenido nuevo
  5. Eliminar contenido removido
  6. Preservar formato y estructura

### 3.1.1 Proceso de Sincronización Automática Modificado
1. **Fase de limpieza (prioridad máxima)**:
   ```bash
   # Pseudocódigo para eliminación
   find _EN -type f | while read -r file_en; do
       file_es="${file_en/_EN/_ES}"
       if [ ! -f "$file_es" ]; then
           rm "$file_en"
       fi
   done
   ```

#### 3.2 Sincronización Manual
- Comando: `rcsync`
- Útil para forzar sincronización completa
- Sigue el mismo proceso que la sincronización automática

### 3.3 Proceso de Sincronización Modificado
1. **Captura de cambios**:
   - Monitorear sistema de archivos con `chokidar`
   - Registrar cambios en el buffer con estado `pending`

2. **Ejecución en `_EN`**:
   ```typescript
   class SyncBuffer {
     private queue: SyncOperation[] = [];
     
     addOperation(op: SyncOperation) {
       this.queue.push(op);
       this.processQueue();
     }
     
     private async processQueue() {
       while (this.queue.length > 0) {
         const op = this.queue.shift();
         try {
           await this.applyOperation(op);
           op.status = 'applied';
         } catch (error) {
           op.status = 'failed';
           op.retries++;
           if (op.retries < 3) this.queue.unshift(op);
         }
       }
     }
   }
   ```

#### 3.4 Paso Final de Limpieza
- **Eliminación de Etiqueta Residual**: Una vez completada la sincronización del contenido de un archivo de `_ES` a `_EN` (incluyendo traducción y preservación de formato), se debe verificar si tanto el archivo base de `_ES` como el archivo resultante en `_EN` terminan *exactamente* con la cadena `</rewritten_file>`.
- Si dicha cadena existe al final del archivo, DEBE ser eliminada antes de considerar la sincronización de ese archivo como finalizada.

### 4. Manejo de Contenido Especial

#### 4.1 Menú Multilenguaje
- **Excepción**: SIEMPRE se ignora en la sincronizacion y NO se traduce el contenido entre:
  ```html
  <!-- MULTILANGUAJE MENU START -->
  contenido del menú
  <!-- MULTILANGUAJE MENU END -->
  ```
- **Importancia**: Mantener intacto para evitar problemas de enlaces

#### 4.2 Nuevos Archivos Markdown
1. **Creación**:
   - Crear en `_ES` nombrando SIEMPRE carpetas y archivos en inglés
   - Replicar en `_EN` con mismo nombre

2. **Inserción del Menú Multilenguaje**
   - En el archivo de `_ES`:
     - Insertar al inicio del archivo el snippet de menú multilenguaje para ES ubicado en `.cursor/snippets/multilanguaje-menu-es.md`
     - Reemplazar `<file-path>` con la ruta relativa del archivo desde la raíz de `_ES`, sin incluir la extension del archivo. Si el archivo se llama `README.md` eliminar el nombre del archivo y la extension de la ruta.
   - En el archivo de `_EN`:
     - Insertar al inicio del archivo el snippet de menú multilenguaje para EN ubicado en `.cursor/snippets/multilanguaje-menu-en.md`
     - Reemplazar `<file-path>` con la ruta relativa del archivo desde la raíz de `_EN`, sin incluir la extension del archivo. Si el archivo se llama `README.md` eliminar el nombre del archivo y la extension de la ruta.
   - **Excepción**: Si un archivo `.md` se crea directamente en `_EN` (aunque no sea la práctica recomendada), DEBE incluir el menú multilenguaje siguiendo el mismo proceso.

> ⚠️ **Nota**: Aunque se permite la inserción del menú en archivos creados directamente en `_EN`, se recomienda encarecidamente seguir el flujo normal de creación en `_ES` y posterior sincronización.

### 4.3 Cláusula de Inmutabilidad de _EN
- **Prohibición absoluta**:
  ```diff
  - Se permiten modificaciones directas en _EN
  + BLOQUEO: Cualquier creación/modificación en _EN que no venga de _ES se considera violación crítica
  ```

### 4.4 Preservación de elementos entre backticks
- **Regla estricta**:
  - Todo contenido entre `backticks` debe conservarse intacto durante la traducción, incluyendo:
    - El símbolo backtick mismo
    - Sintaxis (backticks presentes en ambas versiones)
    - Contenido técnico (nombres de variables, tipos, etc.)
  - Excepción aplicable solo cuando:
    - El texto entre backticks es español coloquial (no técnico)
    - Su traducción al inglés requiere cambio pero manteniendo los backticks

- **Ejemplo de flujo correcto**:
  ```markdown
  # Versión ES
  Para tipos personalizados usa `type MiTipo = ...`
  
  # Versión EN después de sincronización
  For custom types use `type MyType = ...`
  ```

- **Mecanismo de validación**:
  1. Pre-sincronización:
     ```bash
     # Contar backticks en archivo ES
     ES_TICKS=$(grep -o '`' _ES/file.md | wc -l)
     ```
  2. Post-sincronización:
     ```bash
     # Contar backticks en archivo EN
     EN_TICKS=$(grep -o '`' _EN/file.md | wc -l)
     test $ES_TICKS -eq $EN_TICKS || echo "ERROR: Backticks discrepancy"
     ```

- **Protocolo de error**:
  - Si hay diferencia en cantidad de backticks:
    - Revertir cambios en _EN
    - Generar alerta en `.syncbuffer/errors.log`
    - Notificar al usuario via sistema de notificaciones

### 4.5 URLs inmutables

- Todas las URLs presentes en el contenido deben mantenerse exactamente igual en ambas versiones (`_ES` y `_EN`). Bajo ninguna circunstancia se deben traducir, modificar ni adaptar las URLs externas durante el proceso de sincronización o traducción. Solo el texto visible del enlace puede traducirse; la URL debe permanecer intacta.

### 4.6 Sincronización de Tabla de Contenidos (ToC)

- **Gestión Separada**: La generación y actualización de la Tabla de Contenidos (ToC) interna de cada archivo Markdown se rige por la regla específica `@rc---toc-creation.mdc`. El proceso de sincronización entre `_ES` y `_EN` **no** genera ni modifica directamente el contenido del ToC.
- **Sincronización del Contenedor**: El bloque `<details id="toc-container"><summary>Índice de contenidos</summary>...</details>` que contiene el ToC **sí** debe ser sincronizado como cualquier otro contenido. Si un archivo en `_ES` tiene un ToC, su correspondiente archivo en `_EN` también debe tenerlo tras la sincronización (y viceversa, asegurando la eliminación si se quita de `_ES`).
- **Contenido Dependiente del Idioma**: El contenido interno del ToC (los enlaces y la estructura de la lista) depende de los encabezados (`##`, `###`) presentes en cada archivo específico (`_ES` o `_EN`).
- **Aplicación Post-Sincronización**: La regla `@rc---toc-creation.mdc` debe aplicarse *después* de que el contenido principal del archivo (incluyendo encabezados) haya sido sincronizado y traducido a `_EN`, para asegurar que el ToC refleje la estructura correcta del documento en su idioma correspondiente.
- **Ubicación**: El proceso de sincronización debe respetar la ubicación del bloque ToC según se define en `@rc---toc-creation.mdc` (generalmente, después del menú multilenguaje y antes del titulo principal).

### 4.7 Sincronización de Maquetación y Formato Markdown

- **Preservación Estructural**: Elementos de maquetación como tablas Markdown, bloques de cita (`>`), advertencias/hints (`{% hint %}`), separadores (`---`), listas, bloques de código, y los enlaces de 'Volver al Índice' (cuyo texto debe ser `↑ Volver al Índice` para español o `↑ Back to Top` para inglés, apuntando al identificador `#toc-container`) deben mantener su estructura y sintaxis intactas durante la sincronización de `_ES` a `_EN` (solo se traduce el texto visible del enlace 'Volver al Índice' según el idioma destino).
  - **Formato Crítico de Hints**: Es **obligatorio** respetar el formato exacto de los hints de GitBook: línea vacía antes de `{% hint %}`, línea vacía después de `{% endhint %}` y **sin indentación** en ninguna línea del bloque, como se detalla en `@rc---teacher-behaviour.mdc`.
- **Preservación del Espaciado**: Las líneas en blanco y la indentación (tabulaciones o espacios) utilizadas para estructurar el documento en `_ES` deben replicarse exactamente en `_EN` para mantener la legibilidad y la estructura visual. **Esto incluye la preservación de TODAS las líneas vacías sin excepción.**
- **Traducción del Contenido**: El *contenido textual* dentro de estos elementos (texto en celdas de tablas, texto en citas, texto en advertencias, texto en párrafos, etc.) SÍ debe ser traducido al inglés, pero respetando la estructura y formato circundante.
- **Consistencia Visual**: El objetivo es que la presentación visual, la estructura y el formato general del documento sean idénticos en ambas versiones lingüísticas, cambiando únicamente el idioma del texto interno.
- **Ejemplo Tabla**:
  ```markdown
  <!-- _ES version -->
  | Encabezado 1 | Encabezado 2 |
  |--------------|--------------|
  | Celda ES 1   | Celda ES 2   |

  <!-- _EN version after sync -->
  | Header 1     | Header 2     |
  |--------------|--------------|
  | Cell EN 1    | Cell EN 2    |
  ```
- **Ejemplo Cita**:
  ```markdown
  <!-- _ES version -->
  > Este es un texto importante en una cita.

  <!-- _EN version after sync -->
  > This is important text within a quote.
  ```
- **Ejemplo Advertencia**:
  ```markdown
  <!-- _ES version -->

  {% hint style="warning" %}
  Texto de advertencia en español.
  {% endhint %}

  <!-- _EN version after sync -->

  {% hint style="warning" %}
  Warning text in English.
  {% endhint %}

  ```
- **Validación**: Se debe verificar que la sintaxis Markdown que define estos elementos estructurales y de formato no se altere durante la traducción del contenido.

#### 4.8 Sincronización de Comentarios Markdown

- **Inclusión en Traducción**: Los comentarios estándar de Markdown (`<!-- ... -->`) presentes en los archivos de `_ES` DEBEN ser considerados parte del contenido a sincronizar y traducir a sus equivalentes en inglés en la carpeta `_EN`.
- **Propósito**: Asegurar que las notas o aclaraciones importantes dejadas como comentarios en español también estén disponibles y sean comprensibles en la versión en inglés del documento.
- **Proceso**: Durante la sincronización, el texto dentro de `<!--` y `-->` se tratará como cualquier otro texto y se traducirá, manteniendo la sintaxis del comentario intacta.
- **Ejemplo**:
  ```markdown
  <!-- _ES version -->
  <!-- TODO: Revisar esta sección sobre variables -->
  Algún contenido...

  <!-- _EN version after sync -->
  <!-- TODO: Review this section about variables -->
  Some content...
  ```

### 5. Validación y Verificación

#### 5.1 Verificación de Eliminaciones
- Prioridad máxima en la eliminación de contenido
- Verificación línea por línea
- Eliminación de espacios en blanco innecesarios
- Confirmación de estructura intacta

#### 5.2 Manejo de Errores
- Reintentar operaciones fallidas
- Verificar contenido circundante
- Asegurar eliminación completa

#### 5.3 Verificación de Integridad
- **Chequeo pre-sincronización**:
  ```bash
  diff -rq _ES _EN | grep -v '.syncbuffer'
  ```
- **Recuperación de errores**:
  - Reintentos automáticos con backoff exponencial
  - Notificaciones de fallos persistentes via `system-notifications.md`

#### 5.4 Verificación de Huérfanos
- **Comando obligatorio pre-sincronización**:
  ```powershell
  Compare-Object (Get-ChildItem _ES -Recurse) (Get-ChildItem _EN -Recurse) | 
    Where-Object {$_.SideIndicator -eq "=>"}
  ```
  - Si hay resultados: Eliminar elementos en _EN antes de continuar

> ⚠️ **CRÍTICO**: La violación de estas reglas puede causar inconsistencias graves en el contenido. SIEMPRE mantener `_ES` como única fuente de verdad y seguir el proceso de sincronización establecido.